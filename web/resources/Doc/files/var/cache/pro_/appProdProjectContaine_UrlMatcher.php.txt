<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * appProdProjectContaine_UrlMatcher.
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdProjectContaine_UrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);
        $context = $this->context;
        $request = $this->request;

        // test
        if ($pathinfo === '/test') {
            return array (  '_controller' => 'UserBundle\\Controller\\DefaultController::testAction',  '_route' => 'test',);
        }

        if (0 === strpos($pathinfo, '/u')) {
            // updateusers
            if ($pathinfo === '/updateusers') {
                return array (  '_controller' => 'UserBundle\\Controller\\DefaultController::updateAction',  '_route' => 'updateusers',);
            }

            if (0 === strpos($pathinfo, '/user')) {
                // user_index
                if (rtrim($pathinfo, '/') === '/user') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'user_index');
                    }

                    return array (  '_controller' => 'UserBundle\\Controller\\UserController::indexAction',  '_route' => 'user_index',);
                }
                not_user_index:

                // user_new
                if ($pathinfo === '/user/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_user_new;
                    }

                    return array (  '_controller' => 'UserBundle\\Controller\\UserController::newAction',  '_route' => 'user_new',);
                }
                not_user_new:

                // user_show
                if (preg_match('#^/user/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_user_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_show')), array (  '_controller' => 'UserBundle\\Controller\\UserController::showAction',));
                }
                not_user_show:

                // user_edit
                if (preg_match('#^/user/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_user_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_edit')), array (  '_controller' => 'UserBundle\\Controller\\UserController::editAction',));
                }
                not_user_edit:

                // user_delete
                if (preg_match('#^/user/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_user_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'user_delete')), array (  '_controller' => 'UserBundle\\Controller\\UserController::deleteAction',));
                }
                not_user_delete:

            }

        }

        if (0 === strpos($pathinfo, '/validFrais')) {
            // validFrais
            if ($pathinfo === '/validFrais') {
                return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::validFraisAction',  '_route' => 'validFrais',);
            }

            // moisDispoParVisiteur
            if ($pathinfo === '/validFrais/moisDispoParVisiteur!Ajax') {
                return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::moisDispoParVisiteurAction',  '_route' => 'moisDispoParVisiteur',);
            }

            // getFiches
            if ($pathinfo === '/validFrais/getFiches!Ajax') {
                return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::getFichesAction',  '_route' => 'getFiches',);
            }

        }

        // gsb_comptable_gererfrais
        if ($pathinfo === '/gererFrais') {
            return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::gererFraisAction',  '_route' => 'gsb_comptable_gererfrais',);
        }

        // validerFiche
        if ($pathinfo === '/validFrais/validerFiche!Ajax') {
            return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::validFicheAction',  '_route' => 'validerFiche',);
        }

        // suivreFrais
        if ($pathinfo === '/suivreFrais') {
            return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::suivreFraisAction',  '_route' => 'suivreFrais',);
        }

        if (0 === strpos($pathinfo, '/validFrais/m')) {
            // moisDispoParVisiteurFichesValides
            if ($pathinfo === '/validFrais/moisDispoParVisiteurFichesValides!Ajax') {
                return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::moisDisponiblesFichesValidesAction',  '_route' => 'moisDispoParVisiteurFichesValides',);
            }

            // mettreFicheEnPaiement
            if ($pathinfo === '/validFrais/mettreFicheEnPaiement!Ajax') {
                return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::mettreFicheEnPaiementAction',  '_route' => 'mettreFicheEnPaiement',);
            }

        }

        // updateFHF
        if ($pathinfo === '/updateFHF') {
            return array (  '_controller' => 'GSBBundle\\Controller\\ComptableController::updateFHFAction',  '_route' => 'updateFHF',);
        }

        if (0 === strpos($pathinfo, '/etat')) {
            // etat_index
            if (rtrim($pathinfo, '/') === '/etat') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_etat_index;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'etat_index');
                }

                return array (  '_controller' => 'GSBBundle\\Controller\\EtatController::indexAction',  '_route' => 'etat_index',);
            }
            not_etat_index:

            // etat_new
            if ($pathinfo === '/etat/new') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_etat_new;
                }

                return array (  '_controller' => 'GSBBundle\\Controller\\EtatController::newAction',  '_route' => 'etat_new',);
            }
            not_etat_new:

            // etat_show
            if (preg_match('#^/etat/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_etat_show;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'etat_show')), array (  '_controller' => 'GSBBundle\\Controller\\EtatController::showAction',));
            }
            not_etat_show:

            // etat_edit
            if (preg_match('#^/etat/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_etat_edit;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'etat_edit')), array (  '_controller' => 'GSBBundle\\Controller\\EtatController::editAction',));
            }
            not_etat_edit:

            // etat_delete
            if (preg_match('#^/etat/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if ($this->context->getMethod() != 'DELETE') {
                    $allow[] = 'DELETE';
                    goto not_etat_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'etat_delete')), array (  '_controller' => 'GSBBundle\\Controller\\EtatController::deleteAction',));
            }
            not_etat_delete:

        }

        if (0 === strpos($pathinfo, '/f')) {
            if (0 === strpos($pathinfo, '/fichefrais')) {
                // fichefrais_index
                if (rtrim($pathinfo, '/') === '/fichefrais') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fichefrais_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fichefrais_index');
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\FicheFraisController::indexAction',  '_route' => 'fichefrais_index',);
                }
                not_fichefrais_index:

                // fichefrais_new
                if ($pathinfo === '/fichefrais/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fichefrais_new;
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\FicheFraisController::newAction',  '_route' => 'fichefrais_new',);
                }
                not_fichefrais_new:

                // fichefrais_show
                if (preg_match('#^/fichefrais/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fichefrais_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fichefrais_show')), array (  '_controller' => 'GSBBundle\\Controller\\FicheFraisController::showAction',));
                }
                not_fichefrais_show:

                // fichefrais_edit
                if (preg_match('#^/fichefrais/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fichefrais_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fichefrais_edit')), array (  '_controller' => 'GSBBundle\\Controller\\FicheFraisController::editAction',));
                }
                not_fichefrais_edit:

                // fichefrais_delete
                if (preg_match('#^/fichefrais/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_fichefrais_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fichefrais_delete')), array (  '_controller' => 'GSBBundle\\Controller\\FicheFraisController::deleteAction',));
                }
                not_fichefrais_delete:

            }

            if (0 === strpos($pathinfo, '/fraisforfait')) {
                // fraisforfait_index
                if (rtrim($pathinfo, '/') === '/fraisforfait') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fraisforfait_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fraisforfait_index');
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\FraisForfaitController::indexAction',  '_route' => 'fraisforfait_index',);
                }
                not_fraisforfait_index:

                // fraisforfait_new
                if ($pathinfo === '/fraisforfait/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fraisforfait_new;
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\FraisForfaitController::newAction',  '_route' => 'fraisforfait_new',);
                }
                not_fraisforfait_new:

                // fraisforfait_show
                if (preg_match('#^/fraisforfait/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fraisforfait_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fraisforfait_show')), array (  '_controller' => 'GSBBundle\\Controller\\FraisForfaitController::showAction',));
                }
                not_fraisforfait_show:

                // fraisforfait_edit
                if (preg_match('#^/fraisforfait/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fraisforfait_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fraisforfait_edit')), array (  '_controller' => 'GSBBundle\\Controller\\FraisForfaitController::editAction',));
                }
                not_fraisforfait_edit:

                // fraisforfait_delete
                if (preg_match('#^/fraisforfait/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_fraisforfait_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fraisforfait_delete')), array (  '_controller' => 'GSBBundle\\Controller\\FraisForfaitController::deleteAction',));
                }
                not_fraisforfait_delete:

            }

        }

        if (0 === strpos($pathinfo, '/lignefrais')) {
            if (0 === strpos($pathinfo, '/lignefraisforfait')) {
                // lignefraisforfait_index
                if (rtrim($pathinfo, '/') === '/lignefraisforfait') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_lignefraisforfait_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'lignefraisforfait_index');
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisForfaitController::indexAction',  '_route' => 'lignefraisforfait_index',);
                }
                not_lignefraisforfait_index:

                // lignefraisforfait_new
                if ($pathinfo === '/lignefraisforfait/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_lignefraisforfait_new;
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisForfaitController::newAction',  '_route' => 'lignefraisforfait_new',);
                }
                not_lignefraisforfait_new:

                // lignefraisforfait_show
                if (preg_match('#^/lignefraisforfait/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_lignefraisforfait_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'lignefraisforfait_show')), array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisForfaitController::showAction',));
                }
                not_lignefraisforfait_show:

                // lignefraisforfait_edit
                if (preg_match('#^/lignefraisforfait/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_lignefraisforfait_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'lignefraisforfait_edit')), array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisForfaitController::editAction',));
                }
                not_lignefraisforfait_edit:

                // lignefraisforfait_delete
                if (preg_match('#^/lignefraisforfait/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_lignefraisforfait_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'lignefraisforfait_delete')), array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisForfaitController::deleteAction',));
                }
                not_lignefraisforfait_delete:

            }

            if (0 === strpos($pathinfo, '/lignefraishorsforfait')) {
                // lignefraishorsforfait_index
                if (rtrim($pathinfo, '/') === '/lignefraishorsforfait') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_lignefraishorsforfait_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'lignefraishorsforfait_index');
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisHorsForfaitController::indexAction',  '_route' => 'lignefraishorsforfait_index',);
                }
                not_lignefraishorsforfait_index:

                // lignefraishorsforfait_new
                if ($pathinfo === '/lignefraishorsforfait/new') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_lignefraishorsforfait_new;
                    }

                    return array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisHorsForfaitController::newAction',  '_route' => 'lignefraishorsforfait_new',);
                }
                not_lignefraishorsforfait_new:

                // lignefraishorsforfait_show
                if (preg_match('#^/lignefraishorsforfait/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_lignefraishorsforfait_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'lignefraishorsforfait_show')), array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisHorsForfaitController::showAction',));
                }
                not_lignefraishorsforfait_show:

                // lignefraishorsforfait_edit
                if (preg_match('#^/lignefraishorsforfait/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_lignefraishorsforfait_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'lignefraishorsforfait_edit')), array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisHorsForfaitController::editAction',));
                }
                not_lignefraishorsforfait_edit:

                // lignefraishorsforfait_refuse
                if (preg_match('#^/lignefraishorsforfait/(?P<id>[^/]++)/refuse$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_lignefraishorsforfait_refuse;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'lignefraishorsforfait_refuse')), array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisHorsForfaitController::refuseAction',));
                }
                not_lignefraishorsforfait_refuse:

                // lignefraishorsforfait_delete
                if (preg_match('#^/lignefraishorsforfait/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ($this->context->getMethod() != 'DELETE') {
                        $allow[] = 'DELETE';
                        goto not_lignefraishorsforfait_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'lignefraishorsforfait_delete')), array (  '_controller' => 'GSBBundle\\Controller\\LigneFraisHorsForfaitController::deleteAction',));
                }
                not_lignefraishorsforfait_delete:

            }

        }

        // gsb_principal_index
        if (rtrim($pathinfo, '/') === '') {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'gsb_principal_index');
            }

            return array (  '_controller' => 'GSBBundle\\Controller\\PrincipalController::indexAction',  '_route' => 'gsb_principal_index',);
        }

        // gsb_principal_accueil
        if ($pathinfo === '/accueil') {
            return array (  '_controller' => 'GSBBundle\\Controller\\PrincipalController::accueilAction',  '_route' => 'gsb_principal_accueil',);
        }

        // saisieFrais
        if ($pathinfo === '/saisieFrais') {
            return array (  '_controller' => 'GSBBundle\\Controller\\PrincipalController::saisieFraisAction',  '_route' => 'saisieFrais',);
        }

        // deleteLigneHorsForfait
        if (0 === strpos($pathinfo, '/deleteHorsForfait') && preg_match('#^/deleteHorsForfait/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'deleteLigneHorsForfait')), array (  '_controller' => 'GSBBundle\\Controller\\PrincipalController::deleteLigneHorsForfaitAction',));
        }

        // etatFrais
        if ($pathinfo === '/etatFrais') {
            return array (  '_controller' => 'GSBBundle\\Controller\\VisiteurController::etatFraisAction',  '_route' => 'etatFrais',);
        }

        if (0 === strpos($pathinfo, '/log')) {
            if (0 === strpos($pathinfo, '/login')) {
                // fos_user_security_login
                if ($pathinfo === '/login') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_security_login;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::loginAction',  '_route' => 'fos_user_security_login',);
                }
                not_fos_user_security_login:

                // fos_user_security_check
                if ($pathinfo === '/login_check') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_security_check;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::checkAction',  '_route' => 'fos_user_security_check',);
                }
                not_fos_user_security_check:

            }

            // fos_user_security_logout
            if ($pathinfo === '/logout') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_fos_user_security_logout;
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\SecurityController::logoutAction',  '_route' => 'fos_user_security_logout',);
            }
            not_fos_user_security_logout:

        }

        if (0 === strpos($pathinfo, '/profile')) {
            // fos_user_profile_show
            if (rtrim($pathinfo, '/') === '/profile') {
                if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'HEAD'));
                    goto not_fos_user_profile_show;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'fos_user_profile_show');
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::showAction',  '_route' => 'fos_user_profile_show',);
            }
            not_fos_user_profile_show:

            // fos_user_profile_edit
            if ($pathinfo === '/profile/edit') {
                if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                    $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                    goto not_fos_user_profile_edit;
                }

                return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ProfileController::editAction',  '_route' => 'fos_user_profile_edit',);
            }
            not_fos_user_profile_edit:

        }

        if (0 === strpos($pathinfo, '/re')) {
            if (0 === strpos($pathinfo, '/register')) {
                // fos_user_registration_register
                if (rtrim($pathinfo, '/') === '/register') {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_registration_register;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fos_user_registration_register');
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::registerAction',  '_route' => 'fos_user_registration_register',);
                }
                not_fos_user_registration_register:

                if (0 === strpos($pathinfo, '/register/c')) {
                    // fos_user_registration_check_email
                    if ($pathinfo === '/register/check-email') {
                        if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                            $allow = array_merge($allow, array('GET', 'HEAD'));
                            goto not_fos_user_registration_check_email;
                        }

                        return array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::checkEmailAction',  '_route' => 'fos_user_registration_check_email',);
                    }
                    not_fos_user_registration_check_email:

                    if (0 === strpos($pathinfo, '/register/confirm')) {
                        // fos_user_registration_confirm
                        if (preg_match('#^/register/confirm/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirm;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_registration_confirm')), array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmAction',));
                        }
                        not_fos_user_registration_confirm:

                        // fos_user_registration_confirmed
                        if ($pathinfo === '/register/confirmed') {
                            if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                                $allow = array_merge($allow, array('GET', 'HEAD'));
                                goto not_fos_user_registration_confirmed;
                            }

                            return array (  '_controller' => 'FOS\\UserBundle\\Controller\\RegistrationController::confirmedAction',  '_route' => 'fos_user_registration_confirmed',);
                        }
                        not_fos_user_registration_confirmed:

                    }

                }

            }

            if (0 === strpos($pathinfo, '/resetting')) {
                // fos_user_resetting_request
                if ($pathinfo === '/resetting/request') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_request;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::requestAction',  '_route' => 'fos_user_resetting_request',);
                }
                not_fos_user_resetting_request:

                // fos_user_resetting_send_email
                if ($pathinfo === '/resetting/send-email') {
                    if ($this->context->getMethod() != 'POST') {
                        $allow[] = 'POST';
                        goto not_fos_user_resetting_send_email;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::sendEmailAction',  '_route' => 'fos_user_resetting_send_email',);
                }
                not_fos_user_resetting_send_email:

                // fos_user_resetting_check_email
                if ($pathinfo === '/resetting/check-email') {
                    if (!in_array($this->context->getMethod(), array('GET', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'HEAD'));
                        goto not_fos_user_resetting_check_email;
                    }

                    return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::checkEmailAction',  '_route' => 'fos_user_resetting_check_email',);
                }
                not_fos_user_resetting_check_email:

                // fos_user_resetting_reset
                if (0 === strpos($pathinfo, '/resetting/reset') && preg_match('#^/resetting/reset/(?P<token>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                        goto not_fos_user_resetting_reset;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_user_resetting_reset')), array (  '_controller' => 'FOS\\UserBundle\\Controller\\ResettingController::resetAction',));
                }
                not_fos_user_resetting_reset:

            }

        }

        // fos_user_change_password
        if ($pathinfo === '/profile/change-password') {
            if (!in_array($this->context->getMethod(), array('GET', 'POST', 'HEAD'))) {
                $allow = array_merge($allow, array('GET', 'POST', 'HEAD'));
                goto not_fos_user_change_password;
            }

            return array (  '_controller' => 'FOS\\UserBundle\\Controller\\ChangePasswordController::changePasswordAction',  '_route' => 'fos_user_change_password',);
        }
        not_fos_user_change_password:

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}

